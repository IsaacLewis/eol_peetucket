#taxonomic-text-container
  %ul#taxonomictext
    - kingdoms = @session_hierarchy.kingdoms_hash(current_user.expertise, current_user.language) rescue []
    - showed_kingdoms = false
    - kingdoms.each do |kingdom|
      - # show some visible segregation from other kingdoms if this is our current kingdom
      = render(:partial=>'navigation/tree_view_node', :locals=>{:namestring  => kingdom[:name], :italicized_namestring => kingdom[:italicized], :id => kingdom[:id], :valid => kingdom[:valid], :enable => kingdom[:enable], :kingdom => true, :first_kingdom => kingdom == kingdoms.first, :current_kingdom =>(!@taxon_concept.kingdom(@session_hierarchy).nil? && kingdom[:id].to_i == @taxon_concept.kingdom(@session_hierarchy).taxon_concept_id), :level => 0, :hierarchy_id => kingdom[:hierarchy_id], :current_node => (kingdom[:id].to_i == @taxon_concept.id)})
      
      - tc = @taxon_concept.kingdom(@session_hierarchy)
      - if !tc.blank? && kingdom[:id].to_i == tc.taxon_concept_id
        - showed_kingdoms = true
        = render(:partial => 'navigation/tree_view_current_kingdom', :locals => {:current_treepath => @taxon_concept.ancestors_hash(current_user.expertise, current_user.language, @session_hierarchy, @session_secondary_hierarchy), :children_nodes   => @taxon_concept.children_hash(current_user.expertise, current_user.language, @session_hierarchy, @session_secondary_hierarchy).sort { |a,b| a[:name] <=> b[:name]}})
      %br
      -# end if kingdom[:id]
      </li>
    -# end kingdom.each
    - if showed_kingdoms==false || !@taxon_concept.maps_to_hierarchy(@session_hierarchy)
      %ul
        %li
          %br
          %span.message
            - if @concept_browsable_hierarchies.empty?
              Name not in any curated hierarchies
            - else
              == Name not in #{hh(@session_hierarchy.label)}. Select an alternate hierarchy from the list above
